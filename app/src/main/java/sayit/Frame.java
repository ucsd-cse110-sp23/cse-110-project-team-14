package sayit;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JSplitPane;
import javax.swing.WindowConstants;

// This code is defining a new class called `Frame` that extends the `JFrame` class
// in Java's Swing library. This class is used to create the main window of the
// application and contains various GUI components such as a sidebar, query and
// response area, and footer. It also contains methods for updating the text
// displayed in the query and response boxes, setting up buttons and their
// listeners, and initializing the audio recorder, audio converter, and chatbot
// objects used in the application. - Autogenerated by MINTLIFY
public class Frame extends JFrame {
    private sideBar sideBar;
    private askPanel askPanel;
    private JSplitPane splitPane;
    private Footer footer;

    private AudioRecorder recorder;
    private JButton askButton;
    private JButton clrButton;
    private JButton delButton;
    private JButton currButton = null;

    private boolean askStop = false;
    private boolean curQ = false;

    static Storage storage = new Storage();

    IAudioConverter converter;
    IChatBot chat;

    // These two methods are updating the text displayed in the GUI for the question
    // and answer boxes. They take in a string parameter and pass it to the
    // corresponding method in the `askPanel` object, which is responsible for
    // displaying the question and answer text. - Autogenerated by MINTLIFY
    public void updateQuestionBox(String string) {
        askPanel.updateQuestionText(string);
    }

    public void updateAnswerBox(String string) {
        askPanel.updateAnswerText(string);
    }

    private void setButtons(Footer footer, JButton askButton, JButton delButton, JButton clrButton) {
        footer.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Add 150 pixels of space from the left of the panel
        footer.add(Box.createRigidArea(new Dimension(150, 0)));
        footer.add(clrButton);

        // Make the extra space go between the two buttons to space them apart
        footer.add(Box.createHorizontalGlue());
        footer.add(delButton);

        footer.add(Box.createHorizontalGlue());
        footer.add(askButton);
        footer.add(Box.createRigidArea(new Dimension(150, 0)));
    }

    /*
     * Primary container for all panels. Frame is a JSplitPane, containing a fixed
     * set sideBar and a dynamic query and
     * response area for ChatGPT.
     */
    Frame(IAudioConverter converter, IChatBot chat) {
        this.converter = converter;
        this.chat = chat;

        this.setSize(1600, 900);
        this.setVisible(true);
        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        sideBar = new sideBar();
        askPanel = new askPanel();
        splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, sideBar, askPanel);
        footer = new Footer();
        recorder = new AudioRecorder();
        askButton = new JButton("Ask Question");
        clrButton = new JButton("Clear All");
        delButton = new JButton("Delete Question");
        this.add(splitPane, BorderLayout.CENTER);
        this.add(footer, BorderLayout.SOUTH);
        setButtons(footer, askButton, delButton, clrButton);

        addListeners();
        revalidate();
    }

    /*
     * Adds a listener to the `Ask Question` Button
     */
    public void addListeners() {
        askButton.addActionListener(new ActionListener() { // start recording on click
            @Override
            public void actionPerformed(ActionEvent e) {
                if (askStop) {
                    recorder.stopRecording();
                    askButton.setText("Ask Question"); // change button text
                    askStop = false; // change toggle
                    Thread t = new Thread( // use another thread for answer computation to not lag UI
                            () -> {
                                try {

                                    /*
                                     * Takes a recording and transcribes it into text using Whisper. After
                                     * transcription, the
                                     * string is saved as a question. Then, that string is asked to ChatGPT. The
                                     * question/answer
                                     * pairs are then stored and displayed in the GUI.
                                     */
                                    String question = converter.audioToString();
                                    if (question.equals("")) {
                                        askPanel.updateQuestionText("Microphone didn't pickup any sound");
                                        askPanel.revalidate();
                                    } else {
                                        askPanel.updateQuestionText(question);
                                        String answer = chat.askQuestion(question);
                                        System.out.println(answer);
                                        askPanel.updateAnswerText(answer);
                                        storage.addQuestion(question, answer);
                                        askPanel.revalidate();
                                        JButton b = new JButton(question);
                                        b.addActionListener(
                                                (ActionEvent event) -> {
                                                    updateQuestionBox(b.getText());
                                                    currButton = b;
                                                    updateAnswerBox(storage.getAnswer(b.getText()));
                                                    System.out.println("BUTTON PRESSED");
                                                });
                                        sideBar.sideBarAddButton(b);
                                        currButton = b;
                                        curQ = false;
                                        System.out.println("CurQ = false");
                                    }

                                } catch (Exception ex) {
                                    System.out.println("Error occured");
                                }
                            });
                    t.start(); // start the new thread
                } else {
                    recorder.startRecording();
                    askButton.setText("Stop Question"); // change text back
                    System.out.println("CurQ = true");
                    curQ = true;
                    askStop = true; // change toggle back

                }
            }
        });

        // This code is adding an action listener to the `delButton` JButton. When
        // the button is clicked, it creates a new thread that deletes the
        // currently selected question from the `storage` object and removes the
        // corresponding button from the `questionHistory` in sideBar. It also sets
        // the `currButton` variable to null, updates the answer
        // and question boxes to display empty strings, and revalidates the GUI
        // components. - Autogenerated by MINTLIFY
        delButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Thread t = new Thread(
                        () -> {
                            System.out.println("Deleted Question");
                            storage.deleteQuestion(currButton.getText());
                            sideBar.deleteButton(currButton);
                            currButton = null;
                            updateAnswerBox(" ");
                            updateQuestionBox(" ");
                            sideBar.revalidate();
                            sideBar.repaint();
                            revalidate();
                        });
                t.start();
            }
        });

        // This code is adding an action listener to the `clrButton` JButton. When
        // the button is clicked, it creates a new thread that checks if the user
        // is currently asking a question. If they are, it prints a message saying
        // that it is unable to clear all. If they are not, it deletes all the
        // buttons from the `questionHistory` in sideBar, clears all the questions
        // and answers from the `storage` object, sets the `currButton` 
        //  variable to null, updates the answer and question boxes
        // to display empty strings, and revalidates the GUI components.
        // Autogenerated by Mintlify
        clrButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Thread t = new Thread(
                        () -> {
                            if (curQ) {
                                System.out.println("Unable to clear all. Currently asking question.");
                            }

                        else {
                                System.out.println("You clicked the clear all button!");
                                sideBar.deleteAll();
                                storage.clearAll();
                                currButton = null;
                                updateAnswerBox(" ");
                                updateQuestionBox(" ");
                                sideBar.revalidate();
                                sideBar.repaint();
                                revalidate();
                            }
                        });
                t.start();
            }
        });
    }
}

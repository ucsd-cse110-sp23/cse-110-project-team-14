package sayit;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.HashMap;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 * The class sideBar is used to construct the sideBar in the JFrame for the
 * SayItApp. The sideBar is a JScrollPane.
 * Within sideBar, there is a JPanel Header(header) and a JPanel(sideBarPanel)
 * for aggregating content into the sideBar.
 * 
 * @author Apollo Larragoitia
 */
public class sideBar extends JScrollPane {
    private Dimension minSize = new Dimension(400, 900);
    private GridLayout HISTORYGRID = new GridLayout(0, 1, 5, 5);
    private BorderLayout BORDERLAYOUT = new BorderLayout();
    private Color DARKGRAY = new Color(36, 36, 36);
    private Color MEDGRAY = new Color(65, 65, 65);
    private Color LIGHTGRAY = new Color(93, 93, 93);
    public sideBarList sideBarList = new sideBarList();
    private sideBarPanel sideBarPanel;
    HashMap<String, JButton> buttonMap;

    /**
     * The following method creates and returns a JScrollPane. The JScrollPane will
     * have its primary viewport set to
     * an instance of sideBarPanel.
     * 
     * @return JScrolLPane
     */
    public sideBar() {
        buttonMap = new HashMap<String, JButton>();
        sideBarPanel = new sideBarPanel();
        this.setViewportView(sideBarPanel);
        this.setVisible(true);
        this.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        this.setMinimumSize(minSize);
        this.setMaximumSize(minSize);
    }

    /**
     * This Java function adds a JButton to a list and maps it to a string key.
     * 
     * @param string The parameter "string" is a String type variable that
     *               represents the text that will be displayed on the JButton. -
     *               autogenerated by MINTLFY
     */
    public void sideBarAddButton(String string) {
        JButton b = new JButton(string);
        sideBarList.add(b);
        buttonMap.put(string, b);

    }

    /**
     * This function adds a JButton to a list and maps its text to the button
     * object.
     * 
     * @param b b is a JButton object that represents the button being added to the
     *          sideBarList. - autogenerated by MINTLFY
     */
    public void sideBarAddButton(JButton b) {
        sideBarList.add(b);
        buttonMap.put(b.getText(), b);
    }

    /**
     * This function removes a button from a list and a map, and revalidates the
     * GUI components.
     * 
     * @param b The parameter "b" is a JButton object that represents the button
     *          that needs to be deleted from the user interface. - autogenerated by
     *          MINTLFY
     */
    public void deleteButton(JButton b) {
        buttonMap.remove(b.getText());
        sideBarList.remove(b);
        sideBarList.revalidate();
        sideBarPanel.revalidate();
        this.revalidate();
    }

    /**
     * This function removes a button from a sidebar list and updates the GUI.
     * 
     * @param string The parameter "string" is a String variable that represents
     *               the key of a button in a HashMap called "buttonMap". This
     *               method is used to
     *               remove a button from a list called "sideBarList" and the
     *               corresponding
     *               key-value pair from the "buttonMap" HashMap. - autogenerated by
     *               MINTLFY
     */
    public void deleteButton(String string) {
        sideBarList.remove(buttonMap.get(string));
        buttonMap.remove(string);
        sideBarList.revalidate();
        sideBarList.repaint();
        sideBarPanel.revalidate();
        sideBarPanel.repaint();
        this.revalidate();
        this.repaint();
    }

    /**
     * The function deletes all buttons from a map and removes all items from a
     * list. - autogenerated by MINTLFY
     */
    public void deleteAll() {
        buttonMap.clear();
        sideBarList.removeAll();
        sideBarList.revalidate();
    }

    /**
     * This function revalidates the components of a Java GUI, including the main
     * panel, sidebar panel, and sidebar list. - autogenerated by MINTLFY
     */
    public void revalidateComponents() {
        revalidate();
        sideBarPanel.revalidate();
        sideBarList.revalidate();
        revalidate();
    }

    /**
     * Imports from a txt file question and answer pairs into a HashMap for
     * reference.
     * 
     * @param file
     * @return HashMap of question answer pairs
     */
    public HashMap<String, String> loadQuestions(File file) {
        HashMap<String, String> questionAnswerMap = new HashMap<String, String>();
        try {
            FileReader reader = new FileReader(file);
            BufferedReader buf = new BufferedReader(reader);
            while (buf.ready()) {
                String[] split = buf.readLine().split("[,]");
                questionAnswerMap.put(split[0], split[1]);
            }
            buf.close();
        } catch (Exception e) {

        }
        return questionAnswerMap;
    }

    /*
     * JPanel that the viewport of sideBar views. Contains a List Panel that
     * dynamically updates with question history.
     */
    class sideBarPanel extends JPanel {
        JLabel sideBarHeader = new JLabel("Question History");

        sideBarPanel() {
            this.setLayout(BORDERLAYOUT);
            this.setMinimumSize(minSize);
            this.setPreferredSize(minSize);
            this.setBackground(LIGHTGRAY);
            this.setVisible(true);
            sideBarHeader.setHorizontalAlignment(JLabel.CENTER);
            sideBarHeader.setPreferredSize(new Dimension(200, 100));
            sideBarHeader.setBackground(DARKGRAY);
            sideBarHeader.setPreferredSize(new Dimension(300, 200));
            sideBarHeader.setForeground(new Color(0, 0, 0));

            this.add(sideBarHeader, BorderLayout.PAGE_START);
            this.add(sideBarList);

            revalidate();
        }
    }

    class sideBarList extends JPanel {
        sideBarList() {
            this.setBackground(MEDGRAY);
            this.setLayout(HISTORYGRID);
        }

    }
}
